name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '0.1.0'

permissions:
  contents: write  # This gives write access to releases and artifacts

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: 
          - x86_64-linux-android
          - armv7-linux-androideabi
          - x86_64-pc-windows-gnu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Windows cross-compilation tools
      if: contains(matrix.target, 'windows')
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Android NDK
      if: contains(matrix.target, 'android')
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r26b
    
    - name: Prepare Android Build
      if: contains(matrix.target, 'android')
      run: |
        mkdir -p .cargo
        echo '[target.${{ matrix.target }}]
        linker = "${{ matrix.target }}-clang"
        ar = "llvm-ar"' > .cargo/config.toml
      working-directory: cryptg
    
    - name: Prepare Windows Build
      if: contains(matrix.target, 'windows')
      run: |
        mkdir -p .cargo
        echo '[target.${{ matrix.target }}]
        linker = "x86_64-w64-mingw32-gcc"
        ar = "x86_64-w64-mingw32-gcc-ar"' > .cargo/config.toml
      working-directory: cryptg
    
    - name: Build Project
      run: |
        if [[ "${{ matrix.target }}" == *"android"* ]]; then
          cargo install cargo-ndk
          cargo ndk --target ${{ matrix.target }} build --release
        elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cargo build --target ${{ matrix.target }} --release
        else
          cargo build --target ${{ matrix.target }} --release
        fi
      working-directory: cryptg
    
    - name: Prepare Artifact
      run: |
        mkdir -p release
        if [[ "${{ matrix.target }}" == *"android"* ]]; then
          cp target/${{ matrix.target }}/release/libcryptg.so release/libcryptg-${{ matrix.target }}.so
        elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
          cp target/${{ matrix.target }}/release/cryptg.dll release/cryptg-${{ matrix.target }}.dll
        fi
      working-directory: cryptg

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        tag: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: Automated release of cryptg libraries
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: 'cryptg/release/*'
